{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,qCAEI,sBAAMC,SAfO,SAACC,GAClBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAEhCR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAQV,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAxBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YA6BnB,mCAAMT,EAAN,W,+BCnCCY,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAGbC,EAHa,gDAGmCC,UAAWH,GAH9C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAgBZM,GAhBY,4CAAH,sDCDPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAKrC,OAHAc,QAAQC,IAAI,CAAEN,KAAIC,QAAOV,QAIrB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,kCAAMA,EAAN,WCNCS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAGtB,ECJwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OArBAC,qBAAW,WAIP1B,EAASC,GACJ0B,MAAM,SAAAC,GAICH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAK1B,IAKIC,EDxB2BK,CAAc5B,GAAlCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAGtB,OAEI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAEjDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjBxBkB,EAAe,WAExB,MAAoC3C,mBAAS,CAAE,cAA/C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAKA,6BAEQ6C,EAAWrB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCtBlC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.816d7185.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    // Que puedan escribir en el input, y que se reciba lo escrito\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    // Cunedo se da Enter, que dispare una acción, y que no se recargue la página\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // Que no se pueda dar enter, ni agregar nada si tiene menos de dos letras\n        if ( inputValue.trim().length > 2) {\n            //console.log('Submit hecho')\n        setCategories( cats => [ inputValue, ...cats ] );\n        setInputValue('');\n        }\n       \n    }\n\n    return (\n        <>\n            {/* Caja de Input */}\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n\n            </form>\n\n            {/* Mostar lo que se esta escribiendo en el input*/}\n            <h5> {inputValue} </h5>\n\n        </>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\n\nexport const getGifs = async ( category ) => {\n\n    // Realizar petición http de una API\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=BMsdZQVRLkO2T9wp4ZsGx7qhObU0KCfP`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    // Extraer información de la data que me interesa\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n    \n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n    console.log({ id, title, url });\n\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n   \n    const { data: images, loading } = useFetchGifs( category );\n\n\n    return (\n\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n\n\n\n            </div>\n        </>\n\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        \n\n        // Obtener imágenes de las categorias, a los 3 segundos de cargando, pasar la información al componente GifGrid.js\n        getGifs( category )\n            .then( imgs => {\n\n            // console.log(imgs);\n\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n             \n            })\n\n    }, [])\n\n\n\n\n    return state; // { data: [], loading: true };\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([ 'One Punch' ]);\n\n    //Agregar un nuevo elemento al arreglo, mantengo las categorías anteriores y agrego una nueva.\n    // const handleAdd = () => {\n    //    // setCategories( [ ...categories, 'HunterXHunter'] );\n    //    setCategories( cats => [ ...categories, 'HunterXHunter' ] );\n    //}\n\n\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n\n\n            {/* Muestro en pantalla las categorías */}\n            <ol>\n                {\n                    categories.map( (category) =>  (\n                        <GifGrid \n                            key={ category }\n                            category={ category } />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}